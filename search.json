[{"title":"Hello World","url":"/EverlastingSnow.github.io/2025/05/12/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"设计模式","url":"/EverlastingSnow.github.io/2025/05/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","content":"设计模式1.创建型模式\n简单工厂模式：将对象交给工厂创建\n\n\n工厂模式：在简单工厂的基础上，具体工厂是抽象工厂的子类，创建具体工厂后，对象交给具体工厂创建\n\n\n抽象工厂模式：在工厂的基础上，对象有多个不同的抽象类\n\n\n建造者模式：有多个建造者，指挥者指定某个建造者，按他的方案构建多个部分的对象\n\n\n单例模式：类的静态成员，无则创造，有则沿用。\n\n\n\n2.结构型模式\n适配器模式：添加中间层，实现多个调用和接口的适配(n*m-&gt;1)\n\n\n桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。即对于不同父类的多个子类，将继承关系转换为关联关系桥接在一起（如图形有矩形、圆形、椭圆、正方形；红色、绿色、蓝色）。\n\n\n装饰模式：将一个类的对象嵌入另一个对象中，由另一个对象来决定是否调用嵌入对象的行为\n\n\n外观模式：外部与系统的子系统通信的统一接口\n\n\n享元模式：用map存对象，创建时存在则复用\n\n\n代理模式：对真实对象添加了一层代理进行调用。\n\n\n\n3.行为型模式：\n命令模式：对操作进行封装，客户不知道内部实现\n\n\n中介者模式：通过中介者通信，减少对象之间的关系数\n\n\n观察者模式：一个对象发生改变时将自动通知同为对象的观察者，观察者可以添加和删除\n\n\n状态模式：对象在多个状态中根据事件进行转换\n\n\n策略模式：为任务设计多个策略，设置使用的策略，在执行任务时调用。\n\n\n参考：https://design-patterns.readthedocs.io/zh-cn/latest/read_uml.html\n","categories":["八股","软件工程"],"tags":["Design Patterns"]}]